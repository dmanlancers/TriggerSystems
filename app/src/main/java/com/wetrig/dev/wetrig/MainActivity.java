package com.wetrig.dev.wetrig;import android.content.DialogInterface;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Color;import android.support.design.widget.CoordinatorLayout;import android.support.design.widget.NavigationView;import android.support.design.widget.Snackbar;import android.support.v4.app.FragmentManager;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBar;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.ImageView;import android.widget.TextView;import com.wetrig.dev.wetrig.Authentication.LoginActivity;import com.wetrig.dev.wetrig.Fragments.AddSystemF2Fragment;import com.wetrig.dev.wetrig.Fragments.CustomDialogFragment;import com.wetrig.dev.wetrig.Fragments.DetailsFragmentNew;import com.wetrig.dev.wetrig.Fragments.DeviceFragment;import com.wetrig.dev.wetrig.Fragments.GatewayFragment;import com.wetrig.dev.wetrig.Fragments.MenuFragment;import com.wetrig.dev.wetrig.Fragments.MenuFragmentItems.LocationFragment;import com.wetrig.dev.wetrig.Fragments.DirectoryFragment;import com.wetrig.dev.wetrig.Fragments.MenuFragmentItems.NextFragment;import com.wetrig.dev.wetrig.Fragments.MenuFragmentItems.NextItems.AfterFragment;import com.wetrig.dev.wetrig.Fragments.MenuFragmentItems.NextItems.TodayFragment;import com.wetrig.dev.wetrig.Fragments.MenuFragmentItems.NextItems.TomorrowFragment;import com.wetrig.dev.wetrig.Fragments.UpdateSystemFragment;import com.wetrig.dev.wetrig.POJO.AddRatting;import com.wetrig.dev.wetrig.POJO.AddSystem;import com.wetrig.dev.wetrig.POJO.CreateFolderGateway;import com.wetrig.dev.wetrig.POJO.CreateFolderSystem;import com.wetrig.dev.wetrig.POJO.DeleteSystem;import com.wetrig.dev.wetrig.POJO.Devices;import com.wetrig.dev.wetrig.POJO.ProgramRun;import com.wetrig.dev.wetrig.POJO.RattingList;import com.wetrig.dev.wetrig.POJO.RunStopSchedule;import com.wetrig.dev.wetrig.POJO.SwitchOnOff;import com.wetrig.dev.wetrig.POJO.NextToday;import com.wetrig.dev.wetrig.POJO.Today;import com.wetrig.dev.wetrig.POJO.Total_Devices;import com.wetrig.dev.wetrig.POJO.UpdateSystem;import com.wetrig.dev.wetrig.POJO.UserData;import com.wetrig.dev.wetrig.POJO.ratting;import com.wetrig.dev.wetrig.POJO.systemId;import com.wetrig.dev.wetrig.Profile.ProfileActivity;import com.wetrig.dev.wetrig.Retrofit.RestInterface;import com.wetrig.dev.wetrig.Retrofit.ServiceGenerator;import java.util.ArrayList;import java.util.LinkedList;import java.util.List;import retrofit2.Call;import retrofit2.Callback;import retrofit2.Response;public class MainActivity extends AppCompatActivity implements DirectoryFragment.OnDataPass, DetailsFragmentNew.OnDataPassDetails ,        MenuFragment.OnDataPassLocation , CustomDialogFragment.UpdateSystem{    private LinkedList<Devices> device;    private List<ratting> rating;    private List<ProgramRun> status;    private List<UserData> userdata;    private List<Today> today;    private DrawerLayout mDrawerLayout;    private  String email,imageUser,SysName,Image;    public static final String PREFS_NAME = "MyApp_Settings";    private FragmentManager fragmentManager;    private Button logout;    private Button profile;    private List<systemId> directoryID;    private DrawerLayout mDrawer;    private Toolbar toolbar;    private NavigationView nvDrawer;    private ActionBarDrawerToggle drawerToggle;    private DrawerLayout dl;    private ActionBar actionBar;    private SharedPreferences settings;    private ImageView imgUser;    private TextView userName;    private  String user_name;    private String urlJsonSystems = "http://dev.wetrig.com/web_services/android_get_systems?email=";    private  String urlJsonDevices="http://dev.wetrig.com/web_services/get_android_all_system_device?s_id=";    private   String data = "";    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        toolbar = (Toolbar) findViewById(R.id.toolbar_main);        setSupportActionBar(toolbar);        actionBar = getSupportActionBar();        actionBar.setHomeAsUpIndicator(R.drawable.ic_menu);        actionBar.setDisplayHomeAsUpEnabled(true);        actionBar.setLogo(R.mipmap.wetrig_launcher);        actionBar.setDisplayUseLogoEnabled(true);        dl = (DrawerLayout) findViewById(R.id.drawer_layout);        logout = (Button) findViewById(R.id.logout);        profile = (Button) findViewById(R.id.profile);        device = new LinkedList<>();        rating = new ArrayList<>();        userdata = new ArrayList<>();        status = new ArrayList<>();        directoryID = new ArrayList<>();        today =new ArrayList<>();        fragmentManager = getSupportFragmentManager();     /*   Bundle extras = getIntent().getExtras();        if (extras != null) {            imageUser = extras.getString("image");         user_name = extras.getString("first_name")        }*/        settings = getSharedPreferences(PREFS_NAME, MODE_PRIVATE);        email = settings.getString("key", "");       imageUser = settings.getString("user_image", "");       user_name = settings.getString("first_name","");        imgUser = ( ImageView) findViewById(R.id.imageUser);        userName = ( TextView) findViewById(R.id.username);        userName.setText(user_name);        new ImageDownloader(imgUser).execute("http://dev.wetrig.com/"+ imageUser);        logout.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                settings.edit().clear()                        .commit();                Intent myIntent = new Intent( view.getContext(), LoginActivity.class);                myIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);                startActivityForResult(myIntent, 0);            }        });        profile.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Intent myIntent = new Intent( view.getContext(), ProfileActivity.class);                myIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_CLEAR_TASK | Intent.FLAG_ACTIVITY_NEW_TASK);                startActivityForResult(myIntent, 0);            }        });        Utils.addFragment(MainActivity.this, R.id.mainFragment, new DirectoryFragment());    }    @Override    public void onDataPass(String data, String name, String image, String type, String desc, String location,                           String owner, String latitude, String longitude) {        Bundle bundle = new Bundle();        bundle.putString("s_id", data);        bundle.putString("s_name", name);        bundle.putString("s_img", image);        bundle.putString("sub_cat_name", type);        bundle.putString("sub_cat_desc", desc);        bundle.putString("s_address", location);        bundle.putString("user_email", owner);        bundle.putString("s_latitude", latitude);        bundle.putString("s_longitude", longitude);        DetailsFragmentNew detailsFragment = new DetailsFragmentNew();        detailsFragment.setArguments(bundle);        Log.e("VALORES","" +data+name+image);        Utils.addFragment(MainActivity.this, R.id.mainFragment, detailsFragment);    }    public void onDataPassDetails(String id,String name, String image, String type, String desc, String location,                                  String owner, String lat, String lon ) {        SysName = name;        Image = image;        Bundle bundle = new Bundle();        bundle.putString("s_name", name);        bundle.putString("s_img", image);        bundle.putString("s_id", id);        bundle.putString("sub_cat_name", type);        bundle.putString("sub_cat_desc", desc);        bundle.putString("s_address", location);        bundle.putString("user_email", owner);        bundle.putString("s_latitude", lat);        bundle.putString("s_longitude", lon);        MenuFragment menuFragment = new MenuFragment();        menuFragment.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, menuFragment);    }    public void onDataPassLocation(String name, String latitude, String longitude) {        Bundle bundle = new Bundle();        bundle.putString("s_name", name);        bundle.putString("s_latitude", latitude);        bundle.putString("s_longitude", longitude);        LocationFragment locationFragment = new LocationFragment();        locationFragment.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, locationFragment);    }    public void onDataPassF2(String id) {        Bundle bundle = new Bundle();        bundle.putString("sys_type_id", id);        AddSystemF2Fragment addSystemF2 = new  AddSystemF2Fragment();        addSystemF2.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, addSystemF2);    }    public void onNamePass(String id, String typeId,String name, String description,  String Address, String s_public,                           String latitude, String longitude) {        Bundle bundle = new Bundle();        bundle.putString("s_id", id);        bundle.putString("s_type_id", typeId);        bundle.putString("s_name", name);        bundle.putString("s_desc", description);        bundle.putString("s_address", Address);        bundle.putString("s_public", s_public);        bundle.putString("s_latitude",latitude);        bundle.putString("s_longitude",longitude);        CustomDialogFragment dialog = new  CustomDialogFragment ();        dialog.setArguments(bundle);        dialog.show(fragmentManager, "Sample Fragment");    }    public void UpdateSystem(String id, String typeId, String name, String description, String Address, String s_public,String latitude, String longitude) {        Bundle bundle = new Bundle();        bundle.putString("s_id", id);        bundle.putString("s_type_id", typeId);        bundle.putString("s_name", name);        bundle.putString("s_desc", description);        bundle.putString("s_address", Address);        bundle.putString("s_public", s_public);        bundle.putString("s_latitude",latitude);        bundle.putString("s_longitude",longitude);        UpdateSystemFragment upSys = new  UpdateSystemFragment ();        upSys.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, upSys);    }    public void getNextData(String name, String image) {        Log.e("Main",""+name+image);        Bundle bundle = new Bundle();        bundle.putString("s_name", name);        bundle.putString("s_image",image);        NextFragment nextfragment= new NextFragment();        nextfragment.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, nextfragment);    }    public void todayData(String txtTitle, String logoUrl) {        Bundle bundle = new Bundle();        bundle.putString("s_name", txtTitle);        bundle.putString("s_image",logoUrl);        TodayFragment todayfragment= new TodayFragment();        todayfragment.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, todayfragment);    }    public void tomorrowData(String txtTitle, String logoUrl) {        Bundle bundle = new Bundle();        bundle.putString("s_name", txtTitle);        bundle.putString("s_image",logoUrl);        TomorrowFragment tomorrowfragment= new TomorrowFragment();        tomorrowfragment.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, tomorrowfragment);    }    public void afterData(String txtTitle, String logoUrl) {        Bundle bundle = new Bundle();        bundle.putString("s_name", txtTitle);        bundle.putString("s_image",logoUrl);        AfterFragment afterfragment= new AfterFragment();        afterfragment.setArguments(bundle);        Utils.addFragment(MainActivity.this, R.id.mainFragment, afterfragment);    }    public void getUserData(final String email){        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Call<UserData> call = restInterface.getUserData(email);        Log.e("EmailInside",""+email);        call.enqueue(new Callback<UserData>() {            @Override            public void onResponse(Call<UserData> call, Response<UserData> response) {                if(response.body() != null) {                    userdata.add(response.body());                }            }            @Override            public void onFailure(Call<UserData> call, Throwable t) {                Log.e("error devices", t.getMessage());            }        });    }    public List<UserData> getUserData() {return userdata;}    public void getResponse(final String Id, final String title, final String image, final String status, final int vbudget){        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Call<Total_Devices> call_devices = restInterface.getTotalDevices(Id);        call_devices.enqueue(new Callback<Total_Devices>() {            @Override            public void onResponse(Call<Total_Devices> call_devices, Response<Total_Devices> response_devices) {                if(response_devices.body() != null) {                    device.clear();                    for (int i = 0; i < response_devices.body().getData().size(); i++) {                        if (response_devices.body().getData().get(i).getDName().contains("Output")) {                            device.add(response_devices.body().getData().get(i));                        }                    }                    Bundle bundle = new Bundle();                    bundle.putString("s_name", title);                    bundle.putString("s_img", image);                    bundle.putString("d_id", Id);                    bundle.putString("d_status", status);                    bundle.putInt("d_budget",vbudget );                    bundle.putString("s_id", Id);                    if(device.size()!=0) {                        DeviceFragment deviceFragment = new DeviceFragment();                        deviceFragment.setArguments(bundle);                        Utils.addFragment(MainActivity.this, R.id.mainFragment, deviceFragment);                    }else{                        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);                        builder.setTitle("No devices");                        builder.setMessage("Please add devices");                        builder.setNegativeButton("OK", new DialogInterface.OnClickListener() {                            @Override                            public void onClick(DialogInterface dialog, int which) {                                Utils.addFragment(MainActivity.this, R.id.mainFragment,new DirectoryFragment());                                dialog.dismiss();                            }                        });                        AlertDialog alert = builder.create();                        alert.show();                    }                }            }            @Override            public void onFailure(Call<Total_Devices> call_devices, Throwable t_devices) {                Log.e("error devices", t_devices.getMessage());            }        });    }    public List<Devices> getDevice() {        return device;    }    public void getSwitchStatus(String Id, String channelId, String controllerId, String valueOnOff) {        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Call<SwitchOnOff> call = restInterface.SwitchCommand(controllerId,"6","1","1","0",channelId,valueOnOff);        // Log.e("Value", channelId);        call.enqueue(new Callback<SwitchOnOff>() {            @Override            public void onResponse(Call<SwitchOnOff> call, Response<SwitchOnOff> response) {                if(response.body() != null) {                }            }            @Override            public void onFailure(Call<SwitchOnOff> call, Throwable t) {                Log.e("Error Turn ON/OFF", t.getMessage());            }        });    }    public void createSystemFolder(final String email, String folder_name){        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURN",""+ email + folder_name);        Call<CreateFolderSystem> call = restInterface.createSystemFolder(email, folder_name);        call.enqueue(new Callback<CreateFolderSystem>() {            @Override            public void onResponse(Call<CreateFolderSystem> call_devices, Response<CreateFolderSystem> response) {                if(response.body() != null) {                    Utils.addFragment(MainActivity.this, R.id.mainFragment, new DirectoryFragment());                }            }            @Override            public void onFailure(Call<CreateFolderSystem> call_devices, Throwable t) {                Log.e("error devices", t.getMessage());            }        });    }    public void createFolderGateway(final String email, String folder_name){        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURN",""+ email + folder_name);        //GET TOTAL DEVICES        Call<CreateFolderGateway> call = restInterface.createFolderGateway(email, folder_name);        call.enqueue(new Callback<CreateFolderGateway>() {            @Override            public void onResponse(Call<CreateFolderGateway> call, Response<CreateFolderGateway> response) {                if(response.body() != null) {                    Utils.addFragment(MainActivity.this, R.id.mainFragment, new GatewayFragment());                }            }            @Override            public void onFailure(Call<CreateFolderGateway> call, Throwable t) {                Log.e("error devices", t.getMessage());            }        });    }    public void getRattingList(final String email, String sys_type_id){        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURN",""+ email + sys_type_id);        //GET TOTAL DEVICES        Call<RattingList> call = restInterface.getRattingList(email, sys_type_id);        call.enqueue(new Callback<RattingList>() {            @Override            public void onResponse(Call<RattingList> call, Response<RattingList> response) {                if(response.body() != null) {                    for (int i = 0; i < response.body().getData().size(); i++) {                        rating.add(response.body().getData().get(i));                    }                }            }            @Override            public void onFailure(Call<RattingList> call, Throwable t) {            }        });    }    public List<ratting> getRatting() {        return rating;    }    public void AddRating(final String email, String star_rating, String comment,String system_type){        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURN",""+ email + star_rating+comment+system_type);        //GET TOTAL DEVICES        Call<AddRatting> call = restInterface.AddRatting(email, star_rating,comment,system_type);        call.enqueue(new Callback<AddRatting>() {            @Override            public void onResponse(Call<AddRatting> call, Response<AddRatting> response) {                if(response.body() != null) {                    if(response.body().getSuccess()== 1) {                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.addRating_success), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.GREEN);                        snackbar.show();                    }                }            }            @Override            public void onFailure(Call<AddRatting> call, Throwable t) {                Log.e("error devices", t.getMessage());                CoordinatorLayout coordinatorLayout;                coordinatorLayout = (CoordinatorLayout) findViewById(R.id                        .mainSnackBar);                final Snackbar snackbar = Snackbar                        .make(coordinatorLayout, getString(R.string.serverError), Snackbar.LENGTH_LONG);                View sbView = snackbar.getView();                TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                tv.setTextColor(Color.RED);                snackbar.show();            }        });    }    public void addSystem(final String email, String name, String type,String spublic, String desc, String address, String lat, String lon) {        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURN", "" + email + name + type + spublic + desc + address + lat + lon);        //GET TOTAL DEVICES        Call<AddSystem> call = restInterface.addSystem(email, name, type, spublic, desc, address, lat, lon);        call.enqueue(new Callback<AddSystem>() {            @Override            public void onResponse(Call<AddSystem> call, Response<AddSystem> response) {                if (response.body() != null ) {                    if (response.body().getSuccess() == 1) {                        Log.e("SUCESS", "" + response.body().getSuccess());                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.addSys_sucess), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.GREEN);                        snackbar.show();                    } else if (response.body().getSuccess() == 0) {                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.addSys_error_exists), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.RED);                        snackbar.show();                    }                }                Utils.addFragment(MainActivity.this, R.id.mainFragment, new DirectoryFragment());            }            @Override            public void onFailure(Call<AddSystem> call, Throwable t) {                CoordinatorLayout coordinatorLayout;                coordinatorLayout = (CoordinatorLayout) findViewById(R.id                        .mainSnackBar);                final Snackbar snackbar = Snackbar                        .make(coordinatorLayout, getString(R.string.serverError), Snackbar.LENGTH_LONG);                View sbView = snackbar.getView();                TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                tv.setTextColor(Color.RED);                snackbar.show();            }        });    }    public void updateSystem(final String email, String name, String type,String spublic, String desc, String address, String lat, String lon, String id) {        Log.e("val",""+email+name+type+spublic+desc+address+lat+lon+id);        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURN", "" + email + name + type + spublic + desc + address + lat + lon+ id);        Call<UpdateSystem> call = restInterface.updateSystem(email, name, type, spublic, desc, address, lat, lon,id);        call.enqueue(new Callback<UpdateSystem>() {            @Override            public void onResponse(Call<UpdateSystem> call, Response<UpdateSystem> response) {                if (response.body() != null ) {                    if (response.body().getSuccess() == 1) {                        Log.e("SUCESS", "" + response.body().getSuccess());                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.update_system), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.GREEN);                        snackbar.show();                    } else if (response.body().getSuccess() == 0) {                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.addSys_error_exists), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.RED);                        snackbar.show();                    }                }                Utils.addFragment(MainActivity.this, R.id.mainFragment, new DirectoryFragment());            }            @Override            public void onFailure(Call<UpdateSystem> call, Throwable t) {                CoordinatorLayout coordinatorLayout;                coordinatorLayout = (CoordinatorLayout) findViewById(R.id                        .mainSnackBar);                final Snackbar snackbar = Snackbar                        .make(coordinatorLayout, getString(R.string.serverError), Snackbar.LENGTH_LONG);                View sbView = snackbar.getView();                TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                tv.setTextColor(Color.RED);                snackbar.show();            }        });    }    public void deleteSystem( String email, String id) {        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Call<DeleteSystem> call = restInterface.deleteSystem(email,id);        call.enqueue(new Callback<DeleteSystem>() {            @Override            public void onResponse(Call<DeleteSystem> call, Response<DeleteSystem> response) {                if (response.body() != null ) {                    if (response.body().getSuccess() == 1) {                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.delete_system), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.GREEN);                        snackbar.show();                    }                }                Utils.addFragment(MainActivity.this, R.id.mainFragment, new DirectoryFragment());            }            @Override            public void onFailure(Call<DeleteSystem> call, Throwable t) {                CoordinatorLayout coordinatorLayout;                coordinatorLayout = (CoordinatorLayout) findViewById(R.id                        .mainSnackBar);                final Snackbar snackbar = Snackbar                        .make(coordinatorLayout, getString(R.string.serverError), Snackbar.LENGTH_LONG);                View sbView = snackbar.getView();                TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                tv.setTextColor(Color.RED);                snackbar.show();                Log.e("Retrofit Error", t.getMessage());            }        });    }    public void programRunStop( final  String email, final String id, final String title,final  String image) {        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURNVALUE", "" + id+email+title+image);        Call<ProgramRun> call = restInterface.programRunStop(email,id);        call.enqueue(new Callback<ProgramRun>() {            @Override            public void onResponse(Call<ProgramRun> call, Response<ProgramRun> response) {                if (response.body() != null ) {                    String status = response.body().getStatus();                    int vBudget = response.body().getBudget();                    Log.e("STATUS", "" + status+vBudget+title+image+email);                    getResponse(id,title,image,status,vBudget);                }            }            @Override            public void onFailure(Call<ProgramRun> call, Throwable t) {                CoordinatorLayout coordinatorLayout;                coordinatorLayout = (CoordinatorLayout) findViewById(R.id                        .mainSnackBar);                final Snackbar snackbar = Snackbar                        .make(coordinatorLayout, getString(R.string.serverError), Snackbar.LENGTH_LONG);                View sbView = snackbar.getView();                TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                tv.setTextColor(Color.RED);                snackbar.show();            }        });    }    public List<ProgramRun> Status() {        return status;    }    public void RunStopSchedule(final String id, final String command) {        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Log.e("RETURNVALUE", "" + id+command);        Call<RunStopSchedule> call = restInterface.runStopSchedule(id,command);        call.enqueue(new Callback<RunStopSchedule>() {            @Override            public void onResponse(Call<RunStopSchedule> call, Response<RunStopSchedule> response) {                if (response.body() != null ) {                    if(response.body().getSuccess()==1 && response.body().getResult().contains("started"))                    {                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.StartAuto), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.GREEN);                        snackbar.show();                    }                    if(response.body().getSuccess()==1 && response.body().getResult().contains("stopped"))                    {                        CoordinatorLayout coordinatorLayout;                        coordinatorLayout = (CoordinatorLayout) findViewById(R.id                                .mainSnackBar);                        final Snackbar snackbar = Snackbar                                .make(coordinatorLayout, getString(R.string.StartManual), Snackbar.LENGTH_LONG);                        View sbView = snackbar.getView();                        TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                        tv.setTextColor(Color.YELLOW);                        snackbar.show();                    }                }            }            @Override            public void onFailure(Call<RunStopSchedule> call, Throwable t) {                CoordinatorLayout coordinatorLayout;                coordinatorLayout = (CoordinatorLayout) findViewById(R.id                        .mainSnackBar);                final Snackbar snackbar = Snackbar                        .make(coordinatorLayout, getString(R.string.serverError), Snackbar.LENGTH_LONG);                View sbView = snackbar.getView();                TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                tv.setTextColor(Color.RED);                snackbar.show();            }        });    }    public void todaySchedule( String email, String id) {        RestInterface restInterface = ServiceGenerator.createService(RestInterface.class);        Call<NextToday> call = restInterface.todaySchedule(email,id);        call.enqueue(new Callback<NextToday>() {            @Override            public void onResponse(Call<NextToday> call, Response<NextToday> response) {                if (response.body() != null ) {                }                today.add(response.body().get0());                //Utils.addFragment(MainActivity.this, R.id.mainFragment, new DirectoryFragment());            }            @Override            public void onFailure(Call<NextToday> call, Throwable t) {                CoordinatorLayout coordinatorLayout;                coordinatorLayout = (CoordinatorLayout) findViewById(R.id                        .mainSnackBar);                final Snackbar snackbar = Snackbar                        .make(coordinatorLayout, getString(R.string.serverError), Snackbar.LENGTH_LONG);                View sbView = snackbar.getView();                TextView tv = (TextView) sbView.findViewById(android.support.design.R.id.snackbar_text);                tv.setTextColor(Color.RED);                snackbar.show();                Log.e("Retrofit Error", t.getMessage());            }        });    }    public List<Today> today() {        return today;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == android.R.id.home) {            dl.openDrawer(GravityCompat.START);        }        return super.onOptionsItemSelected(item);    }    public void onBackPressed() {        int count = getSupportFragmentManager().getBackStackEntryCount();        if(count >6){            getSupportFragmentManager().popBackStack();        }        if (count == 1) {            finish();        } else {            getSupportFragmentManager().popBackStack();            Log.e("FRAG_NUMBER:",""+getSupportFragmentManager().getBackStackEntryCount());        }    }}